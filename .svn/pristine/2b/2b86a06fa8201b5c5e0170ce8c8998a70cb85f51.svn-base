
import datetime

from ..dao.AbstractSession import AbstractSession
from ..dao.PlanVerDAO import PlanVerDAO
from ..dao.CalendarDAO import CalendarDAO
from ..util.TimeUtility import TimeUtility
from ..util.ConverterUtility import ConverterUtility


class ScheduleManager(object):
    """
    Schedule Manager Object
    FactorySimulator 객체에 종속되어
    전체 시간의 흐름을 구현하기 위한 클래스,
    시뮬레이션 시간 축 정보를 처리
    """

    #  Static 변수들

    # Constants
    _CONSTANT: str = ""     # Constant

    def __init__(self):
        """
        생성자 : 멤버 변수 선언
        """

        # 2-1. Public
        self.plan_ver_id: str = ""      # PLAN VER ID
        self.plan_ver_name: str = ""    # PLAN VER 명칭

        # 2-2. Private
        self._start_date: datetime.datetime = None          # 시작 일자: datetime /
        self._end_date: datetime.datetime = None            # 종료 일자: datetime /
        self._horizon_len: int = 0                          # 총 캘린더 길이 값 : int
        self._time_step_len: int = 0                        # 시간 간격 길이 값 : int
        self._time_step_delta: datetime.timedelta = None    # 시간 간격 길이 객체: timedelta
        self._cm_calendar: dict = {}                        # CM_CALNDR 테이블을 정리 {YYYYMMDD: row} >> 검색 속도 위해 사용
        self._axis: list = []                               # ScheduleManager 시간 축 전체 [{DATE=datetime}]

    def init(self, session: AbstractSession = None, **kwargs):
        """
        ScheduleManager 인스턴스에 실제 속성을 세팅하는 처리,
        여기서는 가장 기본적 속성들만 세팅하며,
        비가용 계획 구간 등록 처리는 외부에서 .register_unavailable_interval() 메서드를 통하도록 설계
        :param session: Session 인스턴스
        :param **kwargs
            start_date: object{datetime|str} = 시뮬레이션 시작 일자 정보
            end_date: object{datetime|str} = 시뮬레이션 종료 일자 정보
            time_step_length: int = TimeStep 시간 길이
            time_step_uom: str = TimeStep 시간 길이 단위, 가능 단위는 Calendar._TIME_UNIT_TYPES 참조
        :return: void
        """

        # 데이터에 접근할 DAO 객체
        calendar_dao: CalendarDAO = CalendarDAO.instance()
        plan_ver_dao: PlanVerDAO = PlanVerDAO.instance()

        # 데이터 소스로부터 입수한 정보를 담을 빈 Dictionary 객체 생성
        schedule_master_data: dict = {}
        cm_calendar_data: list = []

        if session:     # Session 이 주어진 경우 MfScheduleMasterDao 인스턴스로부터 MF_SCHEDULE_MST 테이블 정보를 취득
            schedule_master_data = plan_ver_dao.map(plan_ver_dao.select_plan_ver(session=session))
        elif kwargs:    # 그렇지 않고 파라메터로 주어진 경우 : UNITTEST 용
            schedule_master_data['PLAN_VER_ID'] = kwargs['plan_ver_id']
            schedule_master_data['PLAN_VER_NM'] = kwargs['plan_ver_nm']
            schedule_master_data['START_DT_HMS'] = kwargs['start_date']
            schedule_master_data['END_DT_HMS'] = kwargs['end_date']
            schedule_master_data['UNIT_TM'] = kwargs['time_step_length']
            schedule_master_data['UNIT_TM_TYP'] = kwargs['time_step_uom']

        # 설정 정보 Key 로부터 각 설정 값 추출
        plan_ver_id: str = schedule_master_data['PLAN_VER_ID']
        plan_ver_nm: str = schedule_master_data['PLAN_VER_NM']
        start_date: object = schedule_master_data['START_DT_HMS']
        end_date: object = schedule_master_data['END_DT_HMS']
        time_step_length: int = schedule_master_data['UNIT_TM']
        time_step_uom: str = schedule_master_data['UNIT_TM_TYP']

        # 시작 및 종료 일자 세팅에 앞서 타입 검사 및 문자열이라면 변환하는 단계
        start_date: datetime.datetime = TimeUtility.check_date_info(date_info=start_date)
        end_date: datetime.datetime = TimeUtility.check_date_info(date_info=end_date)

        # 시작 시간이 종료 시간 이전인지 검사
        check_start_end_date: bool = TimeUtility.check_from_to(start_date=start_date, end_date=end_date, equal_flag=False)
        if not check_start_end_date:
            raise AssertionError(
                f"{start_date} < {end_date} : {check_start_end_date}"
            )

        if session:     # CM_CALENDAR 테이블을 시뮬레이션 기간에 맞게 가져오는 처리
            cm_calendar_data = calendar_dao.map(calendar_dao.select_calendar(
                    session=session,
                    from_date=start_date.strftime(TimeUtility.CALENDAR_YYMMDD_STR_FORMAT),
                    to_date=end_date.strftime(TimeUtility.CALENDAR_YYMMDD_STR_FORMAT)
                )
            )

        # CM_CALENDAR_DATA 를 인스턴스 변수 _cm_calendar 로 세팅
        self.set_cm_calendar(cm_calendar=cm_calendar_data)

        # PLAN_VER_ID, PLAN_VER_NM 정보 세팅
        self.plan_ver_id = plan_ver_id
        self.plan_ver_name = plan_ver_nm

        # 시작 일자 정보 세팅
        TimeUtility.set_plan_start_date(plan_start_date=start_date)
        self.set_start_date(start_date=start_date)

        # 종료 일자 정보 세팅
        TimeUtility.set_plan_end_date(plan_end_date=end_date)
        self.set_end_date(end_date=end_date)

        # 계획 시작 일자부터 종료 일자까지 사이의 시간 구간 길이 계산하여 TimeUtility 에 저장
        TimeUtility.calculate_plan_horizon_seconds()

        # 시작일자와 종료일자로부터 self._horizonLen 값을 세팅
        self._build_horizon()

        # time_step 길이 세팅 : 사용자 지정 UOM 단위 ()
        self.set_time_step(timestep_length=time_step_length, uom=time_step_uom)

        # 세팅된 정보들로부터 Full Calendar Sequence 를 작성
        self._build_full_axis(cm_calendar_data=cm_calendar_data)

    def get_full_axis(self):
        """
        self._axis 를 반환하는 메서드
        :return: list<dict>
        """

        return self._axis

    def get_next_time(self, run_time: dict):
        """
        전달받은 run_time 객체 바로 이후 run_time 객체를 반환해 주는 메서드
        만약 전달받은 run_time 이 마지막이고 이후 아무 캘린더 정보가 없다면 빈 dict 를 반환
        ScheduleSimulator 클래스에서 runTime tick 시에 다음 runTime 이 있는 지 확인하기 위한 용도
        :param run_time: 기준이 될 시간 정보 dict, 이 시간 바로 다음 시간을 return 하기 위해 필요
        :return: dict
        """
        run_time_idx: int = self.get_index(run_time)    # 전달받은 run_time dict 객체의 self._fullCalendar 리스트 내 위치
        next_time_idx: int = run_time_idx + 1           # 전달받은 run_time dict 객체의 다음 위치 값 (index)
        next_time: dict = {}                            # 반환될 다음 run_time dict 객체 변수 선언
        try:
            next_time = self._axis[next_time_idx]       # 있을 경우 다음 run_time dict 객체를 할당
        except IndexError:
            pass                                        # 없을 경우 동작 없음, next_time 변수는 빈 dict 인 채로 유지

        return next_time                                # 파악된 다음 run_time 객체를 반환

    def get_first_time(self):
        """
        self._axis 리스트 내에서 가장 시작 지점의 runTime 정보 dict 객체를 반환하는 메서드
        :return: dict = 가장 시작 지점 runTime 정보
        """
        first_time: dict = self._axis[0]
        return first_time

    def get_timestep(self):
        """
        RuntimeManager 에 세팅된 _timestep(int: 시간 길이) 값을 반환합니다.
        :return: 시간 구간 길이 (int: 시간 길이)
        """
        return self._time_step_len

    def get_index(self, run_time: dict):
        """
        전달받은 run_time 객체의 self._axis 리스트 내 index 순번을 반환하는 메서드
        :param run_time: dict = runTime 정보
        :return: int = self._axis 리스트 내 index 순번
        """
        run_time_idx: int = self._axis.index(run_time)      # 전달받은 run_time dict 객체의 self._fullCalendar 리스트 내 위치
        return run_time_idx

    def get_full_axis_length(self):
        """
        현재 RuntimeManager 인스턴스에 세팅된 self._axis (전체 캘린더) 갯수를 반환
        :return: int = 전체 캘린더 갯수
        """
        full_axis_length: int = len(self._axis)
        return full_axis_length

    def get_horizon_length(self):
        """
        현재 RuntimeManager 인스턴스에 세팅된 self._horizonLen (초 단위 Horizon 길이) 값을 반환
        :return: int = 캘린더 시작 시점부터 종료 시점까지의 초 단위 시간 간격 길이
        """
        return self._horizon_len

    def get_calendar_info(self, run_time: datetime.datetime):
        """

        :param run_time:
        :return:
        """
        yyyymmdd: str = run_time.strftime(TimeUtility.CALENDAR_YYMMDD_STR_FORMAT)
        return self._cm_calendar[yyyymmdd]

    def set_cm_calendar(self, cm_calendar: list):
        """

        :param cm_calendar:
        :return:
        """
        for row in cm_calendar:
            if row['YYYYMMDD'] not in self._cm_calendar.keys():
                self._cm_calendar[row['YYYYMMDD']] = row
            else:
                raise AssertionError(
                    f"""
                        CM_CALENDAR 테이블의 [YYYYMMDD] 필드에 중복 값이 있습니다.\n
                        \t>> {row['YYYYMMDD']}
                    """
                )

    def set_start_date(self, start_date: datetime.datetime):
        """
        datetime.datetime 형식의 값을 self._startDate 속성으로 할당합니다.
        :param start_date: datetime.datetime 객체
        :return: void
        """
        self._start_date = start_date

    def set_end_date(self, end_date: datetime.datetime):
        """
        datetime.datetime 형식의 값을 self._endDate 속성으로 할당합니다.
        :param end_date: datetime.datetime 객체
        :return:
        """
        self._end_date = end_date

    def set_time_step(self, timestep_length: int, uom: str):
        """
        해당 ScheduleManager 인스턴스의 _timestep(int: uom 단위) 값을 설정합니다.
        :param timestep_length: 시간 구간 길이 (int: 길이 정수 값)
        :param uom: 시간 구간 단위 (str : 'seconds', 'minutes', 'hours', ...)
        :return: void
        """
        is_available_uom: bool = TimeUtility.check_timestep_uom(uom=uom)
        if not is_available_uom:
            raise AssertionError(
                f"{self.__class__.__name__}.set_timestep() 의 uom 파라메터에\n"
                f"사용할 수 없는 시간 구간 단위가 설정되었습니다. uom = {uom}"
            )
        timestep_timedelta: datetime.timedelta = TimeUtility.derive_timedelta(
            time_length=timestep_length,
            time_uom=TimeUtility.get_python_timestep_uom(uom=uom)
        )
        self._time_step_delta = timestep_timedelta
        self._time_step_len = int(timestep_timedelta.total_seconds())

    def _build_full_axis(self, cm_calendar_data: list):
        """
        현재 ScheduleManager 인스턴스에 세팅된 정보들로부터 Full Axis Sequence 를 작성
        시작시점(self._startDate)부터 종료시점(self._startDate + self._horizonSec)까지
        self._timestep 초 만큼의 간격으로 캘린더 Sequence가 작성되어
        self._axis 리스트에 세팅됨
        :return: void
        """

        calendar_no: int = 0        # 초기 Sequence 번호

        # 0초를 기점으로 self._horizonSec 초까지 self._timestep 간격으로 더해가며 차례로 세팅
        for sec in range(0, self._horizon_len + self._time_step_len, self._time_step_len):

            # 현재 일시
            tmp_date: datetime.datetime = self._start_date + calendar_no * self._time_step_delta

            # 각 Calendar 정보를 리스트에 순서대로 append 처리
            self._axis.append(
                {'DATE': tmp_date}
            )
            calendar_no += 1        # Sequence 번호 + 1

    # @staticmethod
    # def _get_current_day_info(cm_calendar_data: list, date_: datetime.datetime):
    #     """
    #
    #     :param date_:
    #     :return:
    #     """
    #     for row in cm_calendar_data:
    #         if row['YYYYMMDD'] == date_.strftime(TimeUtility.CALENDAR_YYMMDD_STR_FORMAT):
    #             return row
    #     return dict()

    def _build_horizon(self):
        """
        현재 ScheduleManager 인스턴스에 세팅된 시작 및 종료 시점 정보로부터
        시작부터 종료 시점 사이의 시간 간격을 초 단위로 self._horizonLen 변수에 할당하는 처리
        :return: void
        """
        horizon: datetime.timedelta = self._end_date - self._start_date
        self._horizon_len = int(horizon.total_seconds())
