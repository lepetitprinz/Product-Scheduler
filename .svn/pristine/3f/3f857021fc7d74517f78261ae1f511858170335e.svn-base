from m4.dao.AbstractSession import AbstractSession
from m4.dao.FactoryDAO import FactoryDAO
from m4.dao.FactoryScheduleDAO import FactoryScheduleDAO
from m4.dao.BomDAO import BomDAO
from ..dao.CalendarDAO import CalendarDAO
from ..dao.InventoryDAO import InventoryDAO
from ..dao.ProcessDAO import ProcessDAO
from ..dao.BorDAO import BorDAO
from ..dao.RouteDAO import RouteDAO
from ..util.DateTimeUtility import DateTimeUtility
from ..constraint.ScheduleConstraint import ScheduleConstraint
from ..manager.Route import Route
from ..entity.Inventory import Inventory
from ..entity.Process import Process
from m4.entity.Factory import Factory

from m4.dao.DemandDAO import DemandDAO


class FactoryBuilder:
    # Demand
    _demand_list: list = []

    # Route 관련
    _routes: list = []  # OK
    _work_order_item_list: list = []    # OK
    _to_from_item_dict: dict = {}   # OK
    _item_to_final_item_dict: dict = {}     # OK

    @classmethod
    def build(cls, plan_version_dict, simulation_dict, session: AbstractSession):

        instance: Factory = Factory()

        factory_info, bom, inventory_master, process_master, bor_master, route_master, work_order_master = \
            cls.get_dao_data(session)

        schedule_constraints = cls._init_schedule_constraints(simulation_dict, session)

        inventories = cls._init_inventories(inventory_master=inventory_master)
        processes = cls._init_processes(process_master=process_master, bor_master=bor_master)

        # Route 관련 정보들 초기화
        work_order_item_list: list = cls._init_work_orders(work_order_master=work_order_master)
        to_from_item_dict: dict = cls._create_to_from_item_dict(route_master=route_master)
        item_route_list, item_route_error_list = cls._create_work_order_route(work_order_item_list=work_order_item_list,
                                                                              to_from_item_dict=to_from_item_dict)
        item_to_final_item_dict = cls._create_item_to_final_item_dict(item_route_list=item_route_list)

        # 공장 내 Route 객체들을 초기화
        routes: list = cls._init_routes(route_master=route_master)

        # _to_from_item_dict: dict = cls._create_to_from_item_dict(route_master=route_master)
        # cls._init_routes(route_master=route_master)
        #
        # work_order_master: list = cls._init_work_orders(work_order_master=work_order_master)
        # _item_to_final_item_dict: dict = cls._create_route_group(route_master=route_master)

        instance.init(info=factory_info,
                      schedule_constraints=schedule_constraints,
                      inventories=inventories,
                      processes=processes,
                      work_order_item_list=work_order_item_list,
                      to_from_item_dict=to_from_item_dict,
                      item_to_final_item_dict=item_to_final_item_dict,
                      routes=routes)

        return instance

    @classmethod
    def _init_schedule_constraints(cls, simulation_dict, session: AbstractSession):
        """
        :param factory_schedule_constraints:
        :return:
        """
        schedule_constraints: ScheduleConstraint = ScheduleConstraint()
        schedule_constraints.init(simulation_dict["FACTRY_SCHDL_ID"], session)

        return schedule_constraints

    @classmethod
    def _init_inventories(cls, inventory_master: list):
        """

        :param inventory_master:
        :return:
        """
        _inventories: dict = {}
        for info in inventory_master:
            if info['INV_ID'] in _inventories.keys():
                inventory: Inventory = _inventories[info['INV_ID']]
            else:
                inventory = Inventory()
                inventory.init(info=info)
            _inventories[info['INV_ID']] = inventory
        return _inventories

    @classmethod
    def _init_processes(cls, process_master: list, bor_master: list):
        """

        :param process_master:
        :return:
        """
        _processes: dict = {}
        for proc_info in process_master:
            if proc_info['PROC_ID'] in _processes.keys():
                process: Process = _processes[proc_info['PROC_ID']]
            else:
                process = Process()
                process.init(info=proc_info)
            tmp_bor: list = [row for row in bor_master if row['PROC_ID'] == process.id]
            for resource_info in tmp_bor:
                process.append_resource(info=resource_info)
            _processes[proc_info['PROC_ID']] = process
        return _processes

    # ===================================================== 200408 =====================================================

    @classmethod
    def _init_work_orders(cls, work_order_master: list) -> list:
        """

        :param work_order_master:
        :return:
        """
        work_order_item_list: list = []
        for work_order_item in work_order_master:
            if work_order_item['ORDER_ITEM_ID'] not in work_order_item_list:
                work_order_item_list.append(work_order_item['ORDER_ITEM_ID'])
        work_order_item_list = sorted(work_order_item_list)

        return work_order_item_list

    @classmethod
    def _init_routes(cls, route_master: list):
        """

        :param route_master:
        :return:
        """
        # Work Order Item에 관한 To ~ From Route Dictionary 작성
        # to_from_item_dict: dict = cls._create_to_from_item_dict(route_master=route_master)

        #
        # item_route_list, item_route_error_list = cls._create_work_order_route(
        #     work_order_item_list=work_order_item_list,
        #     to_from_item_dict=to_from_item_dict)

        # Location 정보 setting
        route_naming_dict = cls._create_location_route_list(route_master=route_master)

        #
        route_loc_group_dict = cls._create_route_group(route_master=route_master)

        # Route 인스턴스 리스트 세팅
        routes: list = []
        for key, val in route_loc_group_dict.items():
            route_id = route_naming_dict[key]
            route_location = key
            bom_route_dict = cls._create_bom_route_dict(bom_route_list=val)

            route = Route()
            route.init(route_id=route_id,
                       route_location=route_location,
                       bom_route_dict=bom_route_dict)
            routes.append(route)

        return routes

    # def _init_routes(self, route_master: dict):
    #     """
    #
    #     :param route_master:
    #     :return:
    #     """
    #     for route_info in route_master:
    #         print(route_info)
    #         id_str: str = "{}_{}".format(route_info['CURR_LOC_ID'],
    #                                      route_info['NEXT_LOC_ID'])
    #         route: Route = self.get_route(route_id=id_str)
    #         if route is None:
    #             route = Route()
    #             route.init(info=route_info)
    #         self._routes[id_str] = route

    @classmethod
    def _create_to_from_item_dict(cls, route_master: list) -> dict:
        """
        각 제품의 To From 정보를 Dictionay 형태로 만드는 처리
        :param route_master: Route Master Data
        :return: None
        """
        to_from_item_dict: dict = {}
        for route in route_master:
            if (route['NEXT_ITEM_ID'] not in to_from_item_dict.keys()) and (route['NEXT_ITEM_ID'] != route['ITEM_ID']):
                to_from_item_dict.update({route['NEXT_ITEM_ID']: route['ITEM_ID']})
        return to_from_item_dict

    @classmethod
    def _create_work_order_route(cls, work_order_item_list: list, to_from_item_dict: dict):

        item_route_list = []
        item_route_error_list = []

        for work_order_item in work_order_item_list:
            work_order_route = [work_order_item]
            while "311110000000" not in work_order_route[-1]:   # 311110000000: RM ITEM_ID (hard coding)
                if work_order_route[-1] in to_from_item_dict.keys():
                    work_order_route.append(to_from_item_dict[work_order_route[-1]])
                else:
                    item_route_error_list.append(work_order_route)
                    break
            item_route_list.append(work_order_route)

        # 반제품 item id ~ final item id에 대한 Dictionary 생성
        # cls._create_item_to_final_item_dict(item_route_list=item_route_list)

        return item_route_list, item_route_error_list

    @classmethod
    def _create_item_to_final_item_dict(cls, item_route_list: list):
        """
        반제품 item id ~ final item id에 대한 Dictionary 생성
        :param item_route_list: 정상적인 item route 정보
        :return: None
        """
        item_to_final_item_dict: dict = {}

        for item_route in item_route_list:
            for item in item_route[1:]:
                if item not in item_to_final_item_dict.keys():
                    item_to_final_item_dict.update({item: item_route[0]})
        return item_to_final_item_dict

    @classmethod
    def _create_route_group(cls, route_master: list):
        route_loc_group_dict: dict = {}

        for route in route_master:
            if route['CURR_LOC_ID'] not in route_loc_group_dict.keys():
                route_loc_group_dict.update({route['CURR_LOC_ID']: [route]})
            else:
                temp_list = route_loc_group_dict[route['CURR_LOC_ID']]
                temp_list.append(route)
                route_loc_group_dict[route['CURR_LOC_ID']] = temp_list

        return route_loc_group_dict

    @classmethod
    def _create_bom_route_dict(cls, bom_route_list: list):
        """

        :param bom_route_list:
        :return:
        """
        bom_route_dict = {}
        for route in bom_route_list:
            # try:
            #     final_item_dict = self._item_to_final_item_dict[route['ITEM_ID']]
            #     bom_route_dict.update({(route['ITEM_ID'], final_item_dict):
            #                                (route['NEXT_ITEM_ID'], route['NEXT_LOC_ID'])})
            # except:
            #     pass
            bom_route_dict.update({route['ITEM_ID']: (route['NEXT_ITEM_ID'], route['NEXT_LOC_ID'])})

        return bom_route_dict

    @classmethod
    def _create_location_route_list(cls, route_master: list):
        """

        :param route_master:
        :return: location_route
        """
        to_from_location_dict = {}
        for route in route_master:
            if route['NEXT_LOC_ID'] not in to_from_location_dict.keys():
                to_from_location_dict.update({route['NEXT_LOC_ID']: route['CURR_LOC_ID']})

        location_route = ['SALES']  # 마지막 Route (Hard Coding)
        while location_route[-1] != 'RM':   # Location Start Route (Hard Coding)
            if location_route[-1] in to_from_location_dict.keys():
                location_route.append(to_from_location_dict[location_route[-1]])

        route_naming_dict = {}
        idx = 0
        for location in location_route:
            route_naming_dict.update({location: 'ROUTE' + str(len(location_route) - idx)})
            idx += 1

        return route_naming_dict

    # =================================================================================================================

    @classmethod
    def get_dao_data(cls, session: AbstractSession):

        factory_dao: FactoryDAO = FactoryDAO.instance()
        factory_info = factory_dao.map(factory_dao.select_one(session=session))[0]

        bom_dao: BomDAO = BomDAO.instance()
        bom = bom_dao.map(bom_dao.select_bom_routing(session=session))

        # InventoryDAO로 부터 정보 받아오기
        inventory_dao: InventoryDAO = InventoryDAO.instance()
        inventory_master = inventory_dao.map(inventory_dao.select_master(session=session))

        # ProcessDAO로 부터 정보 받아오기
        process_dao: ProcessDAO = ProcessDAO.instance()
        process_master = process_dao.map(process_dao.select_master(session=session))

        # BorDAO로 부터 정보 받아오기
        bor_dao: BorDAO = BorDAO.instance()
        bor_master = bor_dao.map(bor_dao.select_bor(session=session))

        # RouteDAO로 부터 정보 받아오기
        route_dao: RouteDAO = RouteDAO.instance()
        route_master = route_dao.map(route_dao.select_route_master(session=session))

        # DemandDAO로 부터 정보 받아오기
        demand_dao: DemandDAO = DemandDAO.instance()
        work_order_master = demand_dao.map(demand_dao.select_demand_master(session=session))

        return factory_info, bom, inventory_master, \
               process_master, bor_master, route_master, work_order_master
