
import numpy as np

from m4.process.AbstractRouteNode import AbstractRouteNode
from ..process.Item import Item
from ..manager.CapaConstraint import CapaConstraint


class Inventory(AbstractRouteNode):
    """
    Inventory Object
    각 공정 단계 별 중간 제품 보관 창고를 구현한 클래스
    Route 로부터 Lot 이 할당되었을 상황에서의
    실제 처리 동작을 수행하도록 설계
    """

    # Inventory 인스턴스들이 공유할 Static 변수들
    staticVar2: object = None                           # Comment

    # Static Constants
    CONSTANT_VARIABLE2: object = None                   # Comment

    def __init__(self):
        """
        생성자 :
        """

        # 멤버 변수 상속
        super().__init__()

        # 2-1. Public
        self.id: str = ""                       # Inventory 일련번호
        self.name: str = ""                     # Inventory 명칭
        self.start_flag: bool = False           # 최초 출발지 여부
        self.end_flag: bool = False           # 최종 종착지 여부

        # 2-2. Private
        self._constraints: list = []
        # Item 객체를 가지고 있는 배열
        self._stocks: list = []

    def init(self, info: dict):

        self.id = info['INV_ID']
        self.name = info['INV_NM']
        self.start_flag = info['START_YN'] == "Y"
        self.end_flag = info['END_YN'] == "Y"

        capa_constraint: CapaConstraint = CapaConstraint()
        capa_constraint.init(total_capa=info['MAX_QTY'])

        self._constraints.append(capa_constraint)

    def check(self):
        """
        check Constraint
        Inventory : CapaConstraint를 체크
        Process : Resource에 empty 상태인 체크, Time/Capa Constraint 체크
        """
        print(f"\t\t\t\t\tChecking {self.__class__.__name__} {self.id} ...")

    def fetch(self):
        """
        get and remove item quantity
        :return : Item
        """
        print(f"\t\t\t\t\tFetching Item {''} from {self.__class__.__name__} {self.id} ...")
        for item in self._stocks:
            return item
        return None

    def put_initial_item(self, item: Item):
        """
        <HARD CODING>
        put item
        Inventory : stocks에 item을 추가
        Process : Resource에 ProcessLot을 생성(ProcessLot안에 Lot이 존재)
        """
        print(f"\t\t\t\t\tPutting Item {''} to {self.__class__.__name__} {self.id} ...")
        if self.id == "RM":
            item.set_item_id(item_id='311110000000')
        item.set_loc_id(loc_id=self.id)
        self._stocks.append(item)

    def put(self, item: Item):
        """
        <HARD CODING>
        put item
        Inventory : stocks에 item을 추가
        Process : Resource에 ProcessLot을 생성(ProcessLot안에 Lot이 존재)
        """
        if item is not None:
            print(f"\t\t\t\t\tPutting Item {''} to {self.__class__.__name__} {self.id} ...")
            item.set_item_id(item_id='311110000000')
            item.set_loc_id(loc_id=self.id)
            self._stocks.append(item)

    def run(self):
        """
        tick이 발생했을때 Timer의 age를 증가
        """
        print(f"\t\t\t\t\tRunning {self.__class__.__name__} {self.id} ...")
