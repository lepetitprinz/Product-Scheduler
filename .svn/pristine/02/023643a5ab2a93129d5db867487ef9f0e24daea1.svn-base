import datetime

from m4.dao.AbstractSession import AbstractSession
from m4.dao.FactoryScheduleDAO import FactoryScheduleDAO
from m4.constraint.TimeConstraintDay import TimeConstraintDay
from m4.constraint.TimeConstraintDaily import TimeConstraintDaily
from m4.constraint.TimeConstraintWeekly import TimeConstraintWeekly
from m4.constraint.TimeConstraintMonthly import TimeConstraintMonthly


class ScheduleConstraint(object):
    """
    Schedule Constraint Object
    Schedule Constraint (비가용 계획) 정보 클래스
    Schedule Constraint 처리 관련 속성 및 동작들이 정의됨
    """
    PRD_TYP: dict = {
        'DAY': TimeConstraintDay,
        'DAILY': TimeConstraintDaily,
        'WEEKLY': TimeConstraintWeekly,
        'MONLY': TimeConstraintMonthly
    }

    def __init__(self):
        """
        Schedule Constraint 생성자
        """
        # time constraints - priority 별로 저장
        self._time_constraints: list = None

    def init(self, factory_schedule_id, session: AbstractSession):

        dao = FactoryScheduleDAO.instance()
        max_priority = dao.select_max_priority(session, factory_schedule_id=factory_schedule_id)['data'][0][0]
        factory_schedule_data = dao.map(dao.select_list(session, factory_schedule_id=factory_schedule_id))

        # schedule constraint 배열에 priority별로 설정
        self._time_constraints = [[] for i in range(max_priority+1)]

        for row in factory_schedule_data:
            self._time_constraints[row['PRIORITY']].append(self._create_time_constraint(row))

    @staticmethod
    def _create_time_constraint(row: dict):
        constraint = ScheduleConstraint.PRD_TYP[row['PRD_TYP']]()
        constraint.init(row)
        return constraint

    def check(self, date: datetime.datetime):

        for time_constraints in self._time_constraints:
            for const in time_constraints:
                ret: bool = const.check(date)
                if ret:
                    return const
        return None
