
import math

from m4.manager.Calendar import Calendar


class ScheduleSimulator(object):
    """
    Schedule Simulator Object
    시뮬레이션에서 실제 공장의 시간 흐름을 구현하기 위한 클래스
    자신의 속성으로 Calendar 인스턴스를 소유하여 이로부터 시간에 대한 정보를 얻고
    실제 self._runTime 속성을 1 timeStep 만큼 진행시키며
    시뮬레이션 시간을 경과시키도록 설계
    """

    # Static

    # Constants

    def __init__(self):
        """
        생성자 :
        """

        # 2-1. Public

        # 2-2. Private
        self._startDate: object = None          # Simulator 엔진 시작 시점: datetime or str
        self._endDate: object = None            # Simulator 엔진 시작 시점: datetime or str
        self._timestepLength: int = 0           # 매 시간 구간 간격 길이: int
        self._timestepUom: str = ""             # 매 시간 구간 간격 단위: str
        self._calendar: Calendar = Calendar()   # Simulator 전체 시간 범위 Calendar 객체
        self._runTime: dict = {}                # Simulator 의 현재 runTime 위치 (int)

    def init(self, start_date: object, end_date: object,
             timestep_length: int, timestep_uom: str):
        """
        ScheduleSimulator 인스턴스에 실제 속성을 세팅하는 처리
        :param start_date: object{datetime|str} = 시뮬레이션 시작 일자 정보
        :param timestep_length: int = Timestep 시간 길이
        :param timestep_uom: str = Timestep 시간 길이 단위, 가능 단위는 Calendar._TIME_UNIT_TYPES 참조
        :param horizon_length: int = Horizon 시간 길이
        :param horizon_uom: str = Horizon 시간 길이 단위, 가능 단위는 Calendar._TIME_UNIT_TYPES 참조
        :return: void
        """

        # ScheduleSimulator 객체 기본 속성 값 설정
        self._set_start_date(start_date=start_date)                 # Simulator 엔진 시작 시점: datetime or str
        self._set_end_date(end_date=end_date)                       # Simulator 엔진 종료 시점: datetime or str
        self._set_timestep_length(timestep_length=timestep_length)  # 매 시간 구간 간격 길이: int
        self._set_timestep_uom(timestep_uom=timestep_uom)           # 매 시간 구간 간격 단위: str

        # Calendar 객체 setup
        self._calendar.init(
            start_date=self._startDate, end_date=end_date,
            time_step_length=self._timestepLength, time_step_uom=self._timestepUom
        )

    def tick_one_time(self):
        """
        현재 self._runTime 값을 1 Time Step 만큼 미래로 업데이트,
        self._calendar 에 정의된 시간 축을 따라 업데이트 됨
        추후 이 tick 메서드 내부 혹은 전후에서
        Factory 내 각 Entity 들의 Time tick 또한 연동되도록 설계 필요
        :return: bool = 다음 runtime 이 없다면 False, 있다면 True / run_time 메서드에서 참조될 Flag 성 정보
        """
        next_runtime: dict = self._calendar.get_next_time(run_time=self._runTime)   # 현재 self._runTime 다음 runtime get
        has_next_runtime: bool = next_runtime != {}                                 # 다음 runtime 이 비었으면 False

        # 다음 runtime 이 있을 경우에만 현재 ScheduleSimulator 의 self._runTime 값을 업데이트
        if has_next_runtime:
            self._runTime = next_runtime

        return has_next_runtime

    def initialize_runtime(self):
        """
        시뮬레이션 시간 진행을 시작하기에 앞서,
        현재 self._runTime 값을 self._calendar 에 세팅된 시작점으로 세팅하는 처리
        :return: void
        """

        # 시뮬레이션 시작에 앞서, self._runTime 값을 self._calendar 의 가장 첫 시작 값으로 설정
        self._runTime: dict = self._calendar.get_first_time()

    def get_current_run_time(self):
        """
        현재 ScheduleSimulator 인스턴스가 실행 중인 _runTime 정보를 반환하는 메서드
        :return: dict = self._runTime
        """
        return self._runTime

    def get_calendar_length(self):
        """
        현재 ScheduleSimulator 인스턴스에 등록된 Calendar 에 세팅된
        self.ScheduleSimulator._fullCalendar (전체 캘린더) 리스트의 갯수를 반환
        :return: int = 전체 캘린더 갯수
        """
        calendar_length: int = self._calendar.get_full_calendar_length()
        return calendar_length

    def add_schedule_policy(self, work_calendars: list):
        """
        <테스트 중> : 현재는 work_calendars 파라메터를 list<list> 형식으로 받도록 작성하여 테스트
        self._calendar 객체에 비가용 계획 구간(들)을 등록하는 처리
        Batch 처리를 위해 파라메터로 Array-like Object 를 받도록 설계
        :param work_calendars: Array-like   ex: pandas.DataFrame, list<list>, ...
        :return: void
        """

        # 각 구간 별로 등록 개별 등록
        for obj in work_calendars:
            interval: list = obj        # [from_date: object, to_date: object, reason: str]

            # self._calendar 에 interval 정보를 등록하는 처리
            self._calendar.register_unavailable_interval(
                from_date=interval[0],
                to_date=interval[1],
                reason=interval[2]
            )

    def _set_start_date(self, start_date: object):
        """
        start_date 값을 self._startDate 속성으로 할당합니다.
        :param start_date: 일반적인 object 를 상정, datetime 인지 str 인지를
                           Calendar 인스턴스가 판단하여 내부에서 처리할 것
        :return: void
        """
        self._startDate = start_date

    def _set_end_date(self, end_date: object):
        """
        start_date 값을 self._startDate 속성으로 할당합니다.
        :param end_date: 일반적인 object 를 상정, datetime 인지 str 인지를
                           Calendar 인스턴스가 판단하여 내부에서 처리할 것
        :return: void
        """
        self._endDate = end_date

    def _set_timestep_length(self, timestep_length: int):
        """
        timestep_length 값을 self._timestepLength 속성으로 할당합니다.
        :param timestep_length: 시간 구간 길이 (int: 길이 정수 값)
        :return: void
        """
        self._timestepLength = timestep_length

    def _set_timestep_uom(self, timestep_uom: str):
        """
        timestep_uom 값을 self._timestepUom 속성으로 할당합니다.
        :param timestep_uom: 시간 구간 단위 (str : 'seconds', 'minutes', 'hours', ...)
        :return: void
        """
        self._timestepUom = timestep_uom

    def _set_horizon_length(self, horizon_length: int):
        """
        horizon_length 값을 self._horizonLength 속성으로 할당합니다.
        :param horizon_length: 시간 구간 길이 (int: 길이 정수 값)
        :return: void
        """
        self._horizonLength = horizon_length

    def _set_horizon_uom(self, horizon_uom: str):
        """
        horizon_uom 값을 self._horizonUom 속성으로 할당합니다.
        :param horizon_uom: 시간 구간 단위 (str : 'seconds', 'minutes', 'hours', ...)
        :return: void
        """
        self._horizonUom = horizon_uom
