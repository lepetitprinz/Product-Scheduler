from m4.common.SingletonInstance import SingletonInstance
from m4.dao.AbstractDAO import AbstractDAO
from m4.dao.AbstractSession import AbstractSession


class InventoryDAO(AbstractDAO, SingletonInstance):
    """
    Inventory Data Access Object
    """

    def select_one(self, session: AbstractSession, **params):
        """
        세션 인스턴스를 통해 Data Source로부터 1개 데이터를 조회
        :param session: AbstractSession 인스턴스
        :param params: sql 파라미터 데이터
        :return: {"columns" : columns, "data" : list}
        """
        return session.select("select * from FS_INV", params)

    def select(self, session: AbstractSession, **params):
        """
        세션 인스턴스를 통해 Data Source로부터 리스트 데이터를 조회
        :param session: AbstractSession 인스턴스
        :param params: sql 파라미터 데이터
        :return: {"columns" : columns, "data" : list}
        """
        return session.select(
            """
                select *
                from FS_INV
                where INV_ID IN
                                (select CURR_LOC_ID from FS_ROUTE where sim_id = :simulation_id and CURR_LOC_ID_TYP = 'INV'
                                 UNION ALL
                                 select NEXT_LOC_ID from FS_ROUTE where sim_id = :simulation_id and NEXT_LOC_ID_TYP = 'INV'
                                )
            """, params)

    def select_item(self, session: AbstractSession, **params):
        """
        세션 인스턴스를 통해 Data Source로부터 리스트 데이터를 조회
        :param session: AbstractSession 인스턴스
        :param params: sql 파라미터 데이터
        :return: {"columns" : columns, "data" : list}
        """
        return session.select(
            """
                select NULL AS WORK_ORDER_ID, NULL AS ORDER_ITEM_ID, T1.ITEM_ID, T1.INV_ID, T1.INV_ID AS LOC_ID,
                       T1.STOCK_QTY QTY, NULL AS DUE_DT
                from FS_INV_ITEM T1
                where INV_ID IN
                            (select CURR_LOC_ID from FS_ROUTE where sim_id = :simulation_id and CURR_LOC_ID_TYP = 'INV'
                             UNION ALL
                             select NEXT_LOC_ID from FS_ROUTE where sim_id = :simulation_id and NEXT_LOC_ID_TYP = 'INV'
                            )
            """, params)

    def select_item_constraint(self, session: AbstractSession, **params):
        """
        세션 인스턴스를 통해 Data Source로부터 리스트 데이터를 조회
        :param session: AbstractSession 인스턴스
        :param params: sql 파라미터 데이터
        :return: {"columns" : columns, "data" : list}
        """
        return session.select(
            """
                select *
                from FS_INV_ITEM_CONST
                where INV_ID IN
                            (select CURR_LOC_ID from FS_ROUTE where sim_id = :simulation_id and CURR_LOC_ID_TYP = 'INV'
                             UNION ALL
                             select NEXT_LOC_ID from FS_ROUTE where sim_id = :simulation_id and NEXT_LOC_ID_TYP = 'INV'
                            )
            """, params)

    def execute(self, session: AbstractSession, data_list: list):
        """
        세션 인스턴스를 통해 Data Source에 대한 CUD를 실행
        :param session: AbstractSession 인스턴스
        :param sql_template: sql template string
        :param data_list: CUD 대상 데이터
        :return: True/False
        """
        pass
